<?php
/**
 * DownLoad.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://k62.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace RK\DownLoadModule\Needle\Base;

use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Routing\RouterInterface;
use Zikula\Common\Translator\TranslatorInterface;
use RK\DownLoadModule\Entity\Factory\EntityFactory;
use RK\DownLoadModule\Helper\EntityDisplayHelper;
use RK\DownLoadModule\Helper\PermissionHelper;

/**
 * FileNeedle base class.
 */
abstract class AbstractFileNeedle
{
    /**
     * Translator instance
     *
     * @var TranslatorInterface
     */
    protected $translator;
    
    /**
     * @var RouterInterface
     */
    protected $router;
    
    /**
     * @var PermissionHelper
     */
    protected $permissionHelper;
    
    /**
     * @var EntityFactory
     */
    protected $entityFactory;
    
    /**
     * @var EntityDisplayHelper
     */
    protected $entityDisplayHelper;
    
    /**
     * Bundle name
     *
     * @var string
     */
    protected $bundleName;
    
    /**
     * The name of this needle
     *
     * @var string
     */
    protected $name;
    
    /**
     * FileNeedle constructor.
     *
     * @param TranslatorInterface $translator
     * @param RouterInterface $router
     * @param PermissionHelper $permissionHelper
    * @param EntityFactory $entityFactory
    * @param EntityDisplayHelper $entityDisplayHelper
     */
    public function __construct(
        TranslatorInterface $translator,
        RouterInterface $router,
        PermissionHelper $permissionHelper,
        EntityFactory $entityFactory,
        EntityDisplayHelper $entityDisplayHelper
    ) {
        $this->translator = $translator;
        $this->router = $router;
        $this->permissionHelper = $permissionHelper;
        $this->entityFactory = $entityFactory;
        $this->entityDisplayHelper = $entityDisplayHelper;
    
        $nsParts = explode('\\', get_class($this));
        $vendor = $nsParts[0];
        $nameAndType = $nsParts[1];
    
        $this->bundleName = $vendor . $nameAndType;
        $this->name = str_replace('Needle', '', array_pop($nsParts));
    }
    
    /**
     * Returns the bundle name.
     *
     * @return string
     */
    public function getBundleName()
    {
        return $this->bundleName;
    }
    
    /**
     * Returns the name of this needle.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Returns the icon name (FontAwesome icon code suffix, e.g. "pencil").
     *
     * @return string
     */
    public function getIcon()
    {
        return 'circle-o';
    }
    
    /**
     * Returns the title of this needle.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->translator->__('Files', 'rkdownloadmodule');
    }
    
    /**
     * Returns the description of this needle.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->translator->__('Links to the list of files and specific files.', 'rkdownloadmodule');
    }
    
    /**
     * Returns usage information shown on settings page.
     *
     * @return string
     */
    public function getUsageInfo()
    {
        return 'DOWNLO{FILES|FILE-fileId}';
    }
    
    /**
     * Returns whether this needle is active or not.
     *
     * @return boolean
     */
    public function isActive()
    {
        return true;
    }
    
    /**
     * Returns whether this needle is case sensitive or not.
     *
     * @return boolean
     */
    public function isCaseSensitive()
    {
        return true;
    }
    
    /**
     * Returns the needle subject entries.
     *
     * @return string[]
     */
    public function getSubjects()
    {
        return ['DOWNLOFILES', 'DOWNLOFILE-'];
    }
    
    /**
     * Applies the needle functionality.
     *
     * @param string $needleId
     * @param string $needleText
     *
     * @return string Replaced value for the needle
     */
    public function apply($needleId, $needleText)
    {
        // cache the results
        static $cache;
        if (!isset($cache)) {
            $cache = [];
        }
    
        if (isset($cache[$needleId])) {
            // needle is already in cache array
            return $cache[$needleId];
        }
    
        // strip application prefix from needle
        $needleText = str_replace('DOWNLO', '', $needleText);
    
        if ('FILES' == $needleText) {
            if (!$this->permissionHelper->hasComponentPermission('file', ACCESS_READ)) {
                $cache[$needleId] = '';
            } else {
                $cache[$needleId] = '<a href="' . $this->router->generate('rkdownloadmodule_file_view', [], UrlGeneratorInterface::ABSOLUTE_URL) . '" title="' . $this->translator->__('View files', 'rkdownloadmodule') . '">' . $this->translator->__('Files', 'rkdownloadmodule') . '</a>';
            }
    
            return $cache[$needleId];
        }
    
        $entityId = intval($needleId);
        if (!$entityId) {
            $cache[$needleId] = '';
    
            return $cache[$needleId];
        }
    
        $repository = $this->entityFactory->getRepository('file');
        $entity = $repository->selectById($entityId, false);
        if (null === $entity) {
            $cache[$needleId] = '<em>' . $this->translator->__f('File with id %id% could not be found', ['%id%' => $entityId], 'rkdownloadmodule') . '</em>';
    
            return $cache[$needleId];
        }
    
        if (!$this->permissionHelper->mayRead($entity)) {
            $cache[$needleId] = '';
    
            return $cache[$needleId];
        }
    
        $title = $this->entityDisplayHelper->getFormattedTitle($entity);
        $cache[$needleId] = '<a href="' . $this->router->generate('rkdownloadmodule_file_display', $entity->createUrlArgs(), UrlGeneratorInterface::ABSOLUTE_URL) . '" title="' . str_replace('"', '', $title) . '">' . $title . '</a>';
    
        return $cache[$needleId];
    }
}
